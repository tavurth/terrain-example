"use strict";

/**
 * Used for a follow camera
 * @param e Event generated by Hammerjs
 */
let followControl = (e) => {
	//   ^
	// < P - - - - - - - C
	//   |
	//   |  Player P, Camera C
	//   |  delta => normalize(P-C)
	//   |
	//   |  Right => Take cross product of forwards and up-vector
	//   |  Multiply right & forward vectors by:
	//   C     (mouseX, 0, mouseX)
	//         (mouseY, 0, mouseY)
	//      To find the left-right or up-down acceleration
	//

	// Get the vector from the camera to the player, then cross product with the up vector
	// to get the camera's left-right direction coefficient
	let forward = group.camera.position.subtract(player.mesh.position).normalize();
	let right   = BABYLON.Vector3.Cross(forward, group.camera.upVector).normalize();
	right.y     = 0;

	let toReturn = B.vector3();

	// Pushing the player to the left or to the right
	toReturn.addInPlace(B.vector3(e.deltaX, 0, e.deltaX).multiply(right).divide(divisorW));

	// Pushing the player forward or backward
	toReturn.addInPlace(B.vector3(e.deltaY, 0, e.deltaY).multiply(forward).divide(divisorH));

	return toReturn;
};